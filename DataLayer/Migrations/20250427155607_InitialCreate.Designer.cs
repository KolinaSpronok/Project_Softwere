// <auto-generated />
using DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(DBLibraryContext))]
    [Migration("20250427155607_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BusinessLayer.Continent", b =>
                {
                    b.Property<string>("ContinentCode")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("continent_code")
                        .IsFixedLength();

                    b.Property<string>("ContinentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("continent_name");

                    b.HasKey("ContinentCode")
                        .HasName("PRIMARY");

                    b.ToTable("continents", (string)null);
                });

            modelBuilder.Entity("BusinessLayer.Country", b =>
                {
                    b.Property<string>("CountryCode")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("country_code")
                        .IsFixedLength();

                    b.Property<string>("ContinentCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("continent_code")
                        .IsFixedLength();

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("country_name");

                    b.HasKey("CountryCode")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ContinentCode" }, "FK_CountriesContinents");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("BusinessLayer.Footballer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<bool?>("Captain")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("captain");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("char(30)")
                        .HasColumnName("country_code");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("last_name");

                    b.Property<decimal>("Price")
                        .HasPrecision(19)
                        .HasColumnType("decimal(19,2)")
                        .HasColumnName("price");

                    b.Property<decimal>("Salary")
                        .HasPrecision(19)
                        .HasColumnType("decimal(19,2)")
                        .HasColumnName("salary");

                    b.Property<int?>("ShirtNumber")
                        .HasColumnType("int")
                        .HasColumnName("shirt_number");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("team_id");

                    b.Property<string>("TeamPosition")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("team_position");

                    b.Property<int?>("Trophies")
                        .HasColumnType("int")
                        .HasColumnName("trophies");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CountryCode" }, "FK_FootballersCountries");

                    b.HasIndex(new[] { "TeamId" }, "FK_FootballersTeams");

                    b.ToTable("footballers", (string)null);
                });

            modelBuilder.Entity("BusinessLayer.Footballerstrophy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("FootballerId")
                        .HasColumnType("int")
                        .HasColumnName("footballer_id");

                    b.Property<int?>("TrophyId")
                        .HasColumnType("int")
                        .HasColumnName("trophy_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TrophyId" }, "FK_Employees");

                    b.HasIndex(new[] { "FootballerId" }, "FK_Programs");

                    b.ToTable("footballerstrophy", (string)null);
                });

            modelBuilder.Entity("BusinessLayer.Stadium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("capacity");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("country_code")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("name");

                    b.Property<string>("TownName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("town_name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CountryCode" }, "FK_StadiumCountries");

                    b.ToTable("stadium", (string)null);
                });

            modelBuilder.Entity("BusinessLayer.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("CoachName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("coach_name");

                    b.Property<string>("Colours")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("colours");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("char(30)")
                        .HasColumnName("country_code");

                    b.Property<int?>("Founded")
                        .HasColumnType("int")
                        .HasColumnName("founded");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("name");

                    b.Property<string>("TeamStadium")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("team_stadium");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CountryCode" }, "FK_TeamsCountries");

                    b.ToTable("teams", (string)null);
                });

            modelBuilder.Entity("BusinessLayer.Trophy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ContinentCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("char(30)")
                        .HasColumnName("continent_code");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("char(30)")
                        .HasColumnName("country_code");

                    b.Property<int?>("Footballers")
                        .HasColumnType("int")
                        .HasColumnName("footballers");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ContinentCode" }, "FK_TrophiesContinents");

                    b.HasIndex(new[] { "CountryCode" }, "FK_TrophiesCountries");

                    b.ToTable("trophies", (string)null);
                });

            modelBuilder.Entity("BusinessLayer.Country", b =>
                {
                    b.HasOne("BusinessLayer.Continent", "ContinentCodeNavigation")
                        .WithMany("Countries")
                        .HasForeignKey("ContinentCode")
                        .IsRequired()
                        .HasConstraintName("FK_CountriesContinents");

                    b.Navigation("ContinentCodeNavigation");
                });

            modelBuilder.Entity("BusinessLayer.Footballer", b =>
                {
                    b.HasOne("BusinessLayer.Country", "CountryCodeNavigation")
                        .WithMany("Footballers")
                        .HasForeignKey("CountryCode")
                        .IsRequired()
                        .HasConstraintName("FK_FootballersCountries");

                    b.HasOne("BusinessLayer.Team", "Team")
                        .WithMany("Footballers")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_FootballersTeams");

                    b.Navigation("CountryCodeNavigation");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("BusinessLayer.Footballerstrophy", b =>
                {
                    b.HasOne("BusinessLayer.Footballer", "Footballer")
                        .WithMany("Footballerstrophies")
                        .HasForeignKey("FootballerId")
                        .HasConstraintName("FK_Programs");

                    b.HasOne("BusinessLayer.Trophy", "Trophy")
                        .WithMany("Footballerstrophies")
                        .HasForeignKey("TrophyId")
                        .HasConstraintName("FK_Employees");

                    b.Navigation("Footballer");

                    b.Navigation("Trophy");
                });

            modelBuilder.Entity("BusinessLayer.Stadium", b =>
                {
                    b.HasOne("BusinessLayer.Country", "CountryCodeNavigation")
                        .WithMany("Stadium")
                        .HasForeignKey("CountryCode")
                        .IsRequired()
                        .HasConstraintName("FK_StadiumCountries");

                    b.Navigation("CountryCodeNavigation");
                });

            modelBuilder.Entity("BusinessLayer.Team", b =>
                {
                    b.HasOne("BusinessLayer.Country", "CountryCodeNavigation")
                        .WithMany("Teams")
                        .HasForeignKey("CountryCode")
                        .IsRequired()
                        .HasConstraintName("FK_TeamsCountries");

                    b.Navigation("CountryCodeNavigation");
                });

            modelBuilder.Entity("BusinessLayer.Trophy", b =>
                {
                    b.HasOne("BusinessLayer.Continent", "ContinentCodeNavigation")
                        .WithMany("Trophies")
                        .HasForeignKey("ContinentCode")
                        .IsRequired()
                        .HasConstraintName("FK_TrophiesContinents");

                    b.HasOne("BusinessLayer.Country", "CountryCodeNavigation")
                        .WithMany("Trophies")
                        .HasForeignKey("CountryCode")
                        .IsRequired()
                        .HasConstraintName("FK_TrophiesCountries");

                    b.Navigation("ContinentCodeNavigation");

                    b.Navigation("CountryCodeNavigation");
                });

            modelBuilder.Entity("BusinessLayer.Continent", b =>
                {
                    b.Navigation("Countries");

                    b.Navigation("Trophies");
                });

            modelBuilder.Entity("BusinessLayer.Country", b =>
                {
                    b.Navigation("Footballers");

                    b.Navigation("Stadium");

                    b.Navigation("Teams");

                    b.Navigation("Trophies");
                });

            modelBuilder.Entity("BusinessLayer.Footballer", b =>
                {
                    b.Navigation("Footballerstrophies");
                });

            modelBuilder.Entity("BusinessLayer.Team", b =>
                {
                    b.Navigation("Footballers");
                });

            modelBuilder.Entity("BusinessLayer.Trophy", b =>
                {
                    b.Navigation("Footballerstrophies");
                });
#pragma warning restore 612, 618
        }
    }
}
